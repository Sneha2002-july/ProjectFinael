import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;

import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;

import com.HIS.model.Doctor;
import com.HIS.model.JsonHandler;
import com.HIS.view.DoctorEditorPanel;

public class DoctorTableModel extends AbstractTableModel {
    private ArrayList<Doctor> doctors;
    private List<Doctor> filteredDoctors;
    private final String[] columnNames = {"ID", "Name", "Contact", "Email","Address","DOB","Age","Department", "Specialization","Qualification", "Start Time", "End Time","Available Days","Consultation Fee"};
    private JsonHandler jsonHandler;
  
    public DoctorTableModel() {
    	jsonHandler = new JsonHandler();
    	this.doctors = jsonHandler.readFromJson();
    	this.filteredDoctors = jsonHandler.readFromJson();
    	Doctor.setIdCounter(filteredDoctors.size()+1);
    	if(doctors==null){
    		doctors = new ArrayList<>();
    	}
    	if(filteredDoctors==null) {
    		this.filteredDoctors = new ArrayList<>();
    	}
    }
    public void addDoctor(Doctor doctor) {
        doctors.add(doctor);
        jsonHandler.writeToJson(doctors);
        filteredDoctors.add(doctor);
        fireTableDataChanged();
    }
    public void filterByName(String query) {
        filteredDoctors.clear();
        for (Doctor doctor : doctors) {
            if (doctor.getName().toLowerCase().contains(query)) {
                    
                filteredDoctors.add(doctor);
            }
        }
        fireTableDataChanged();
    }
    
    
    public void filterByDepartment(String query) {
        filteredDoctors.clear();
        for (Doctor doctor : doctors) {
            if (doctor.getDepartment().toLowerCase().contains(query)) {
                    
                filteredDoctors.add(doctor);
            }
        }
        fireTableDataChanged();
    }
    
    public void filterByNameAndDepartment(String nameQuery, String departmentQuery) {
        filteredDoctors.clear();
        for (Doctor doctor : doctors) {
            if (doctor.getName().toLowerCase().contains(nameQuery) &&
                doctor.getDepartment().toLowerCase().contains(departmentQuery)) {
                filteredDoctors.add(doctor);
            }
        }
        fireTableDataChanged();
    }

    public void resetFilter() {
        filteredDoctors.clear();
        filteredDoctors.addAll(doctors);
        fireTableDataChanged();
    }

    @Override
    public int getRowCount() {
        return filteredDoctors.size();
    }
    @Override
    public int getColumnCount() {               //for update
        return columnNames.length+1;
    }
    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
    	
        Doctor doctor = filteredDoctors.get(rowIndex);
        switch (columnIndex) {
            case 0:return doctor.getId();
            case 1: return doctor.getName();
            case 2: return doctor.getContact();
            case 3: return doctor.getEmail();
            case 4: return doctor.getAddress();
            case 5: return doctor.getDob();
            case 6: return doctor.getAge();
            case 7: return doctor.getDepartment();
            case 8: return doctor.getSpecialization();
            case 9: return doctor.getQualification();
            case 10: return doctor.getStartTime();
            case 11: return doctor.getEndTime();
            case 12: return doctor.getAvailableDays(); 
            case 13:return doctor.getConsultationFee();
            case 14:return "Edit";   //for update
            default: return null;
        }
    }
   public boolean isCellEditable(int rowIndex, int columnIndex) {   //for update
	        return columnIndex==14;
	   
   }
   public void updateDoctor(Doctor doctor) {         //for update
	    int index = doctors.indexOf(doctor);
	    if (index != -1) {
	        doctors.set(index, doctor);
	        jsonHandler.writeToJson(doctors); // Save changes
	        fireTableDataChanged();
	    }
	}

    @Override
    public String getColumnName(int column) {
    	if (column==columnNames.length) {
    		return "Update";
    	}
        return columnNames[column];
    }
    //update
    public void setupTable(JTable table, CardLayout cardLayout, JPanel container, DoctorTableModel tableModel) {
        table.setModel(tableModel);
        table.getColumnModel().getColumn(14).setCellRenderer(new TableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                JButton button = new JButton("Edit");
                return button;
            }
        });
       //update
        table.getColumnModel().getColumn(14).setCellEditor(new DefaultCellEditor(new JCheckBox()) {
            @Override
            public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
                JButton button = new JButton("Edit");
                button.addActionListener(e -> {
                   Doctor selectedDoctor = (Doctor)tableModel.getValueAt(row, column);  //changed getfilterdDoctor.row(
                    DoctorEditorPanel editorPanel = new DoctorEditorPanel(cardLayout, container, tableModel,selectedDoctor);
                    container.add(editorPanel, "Editor");
                    cardLayout.show(container, "Editor");
                });
                return button;
            }
        });
       
    }
}
